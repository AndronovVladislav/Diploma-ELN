"""Single experiments table

Revision ID: 0007
Revises: 0006
Create Date: 2025-04-01 02:40:06.234596

"""
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '0007'
down_revision: Union[str, None] = '0006'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('experiments',
                    sa.Column('user_id', sa.BigInteger(), nullable=False),
                    sa.Column('path', sa.String(), nullable=False),
                    sa.Column('description', sa.String(), nullable=False),
                    sa.Column('kind',
                              sa.Enum('LABORATORY', 'COMPUTATIONAL', name='experimentkind').with_variant(
                                  postgresql.ENUM(
                                      "LABORATORY",
                                      "COMPUTATIONAL",
                                      name="experimentkind",
                                      create_type=False,
                                  ),
                                  "postgresql",
                              ),
                              nullable=False,
                              ),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text("TIMEZONE('utc', now())"),
                              nullable=False),
                    sa.Column('updated_at', sa.DateTime(), server_default=sa.text("TIMEZONE('utc', now())"),
                              nullable=False),
                    sa.Column('id', sa.BigInteger(), server_default=sa.Identity(always=False), nullable=False),
                    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_experiments_user_id_users')),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_experiments'))
                    )
    op.drop_constraint('fk_computational_experiments_user_id_users', 'computational_experiments', type_='foreignkey')
    op.create_foreign_key(op.f('fk_computational_experiments_id_experiments'), 'computational_experiments',
                          'experiments', ['id'], ['id'])
    op.drop_column('computational_experiments', 'updated_at')
    op.drop_column('computational_experiments', 'user_id')
    op.drop_column('computational_experiments', 'created_at')
    op.drop_column('computational_experiments', 'path')
    op.drop_column('computational_experiments', 'description')
    op.drop_constraint('fk_laboratory_experiments_user_id_users', 'laboratory_experiments', type_='foreignkey')
    op.create_foreign_key(op.f('fk_laboratory_experiments_id_experiments'), 'laboratory_experiments', 'experiments',
                          ['id'], ['id'])
    op.drop_column('laboratory_experiments', 'updated_at')
    op.drop_column('laboratory_experiments', 'user_id')
    op.drop_column('laboratory_experiments', 'created_at')
    op.drop_column('laboratory_experiments', 'path')
    op.drop_column('laboratory_experiments', 'description')
    # ### end Alembic commands ###
    # op.alter_column(
    #     'computational_experiments',
    #     'id',
    #     server_default=None,
    #     existing_type=sa.BigInteger()
    # )
    # op.alter_column(
    #     'laboratory_experiments',
    #     'id',
    #     server_default=None,
    #     existing_type=sa.BigInteger()
    # )
    # op.execute('DROP SEQUENCE IF EXISTS computational_experiments_id_seq, laboratory_experiments_id_seq RESTRICT')


def downgrade() -> None:
    # op.execute('CREATE SEQUENCE IF NOT EXISTS computational_experiments_id_seq START 1')
    # op.alter_column(
    #     'computational_experiments',
    #     'id',
    #     server_default=sa.text("nextval('computational_experiments_id_seq'::regclass)"),
    #     existing_type=sa.BigInteger()
    # )
    #
    # op.execute('CREATE SEQUENCE IF NOT EXISTS laboratory_experiments_id_seq START 1')
    # op.alter_column(
    #     'laboratory_experiments',
    #     'id',
    #     server_default=sa.text("nextval('laboratory_experiments_id_seq'::regclass)"),
    #     existing_type=sa.BigInteger()
    # )

    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('laboratory_experiments', sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('laboratory_experiments', sa.Column('path', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('laboratory_experiments', sa.Column('created_at', postgresql.TIMESTAMP(),
                                                      server_default=sa.text("timezone('utc'::text, now())"),
                                                      autoincrement=False, nullable=False))
    op.add_column('laboratory_experiments', sa.Column('user_id', sa.BigInteger(), autoincrement=False, nullable=False))
    op.add_column('laboratory_experiments', sa.Column('updated_at', postgresql.TIMESTAMP(),
                                                      server_default=sa.text("timezone('utc'::text, now())"),
                                                      autoincrement=False, nullable=False))
    op.drop_constraint(op.f('fk_laboratory_experiments_id_experiments'), 'laboratory_experiments', type_='foreignkey')
    op.create_foreign_key('fk_laboratory_experiments_user_id_users', 'laboratory_experiments', 'users', ['user_id'],
                          ['id'])
    op.add_column('computational_experiments',
                  sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('computational_experiments', sa.Column('path', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('computational_experiments', sa.Column('created_at', postgresql.TIMESTAMP(),
                                                         server_default=sa.text("timezone('utc'::text, now())"),
                                                         autoincrement=False, nullable=False))
    op.add_column('computational_experiments', sa.Column('user_id', sa.BigInteger(), autoincrement=False, nullable=False))
    op.add_column('computational_experiments', sa.Column('updated_at', postgresql.TIMESTAMP(),
                                                         server_default=sa.text("timezone('utc'::text, now())"),
                                                         autoincrement=False, nullable=False))
    op.drop_constraint(op.f('fk_computational_experiments_id_experiments'), 'computational_experiments',
                       type_='foreignkey')
    op.create_foreign_key('fk_computational_experiments_user_id_users', 'computational_experiments', 'users',
                          ['user_id'], ['id'])
    op.drop_table('experiments')
    # ### end Alembic commands ###
